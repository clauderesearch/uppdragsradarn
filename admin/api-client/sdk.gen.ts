// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetAssignmentData, GetAssignmentResponse, UpdateAssignmentData, UpdateAssignmentResponse, ReindexAllData, ReindexAllResponse, LogoutData, LogoutResponse, SearchByKeywordData, SearchByKeywordResponse, SearchAssignmentsData, SearchAssignmentsResponse, RunCrawlersNowData, RunCrawlersNowResponse, StartCrawlerJobData, StartCrawlerJobResponse, StartCrawlerJobError, StartScheduledCrawlerJobsData, StartScheduledCrawlerJobsResponse, ApproveAssignmentData, GetSessionInfoData, GetSessionInfoResponse, GetAllAssignmentsData, GetAllAssignmentsResponse, GetAssignmentByIdData, GetAssignmentByIdResponse, CancelCrawlerJobData, CancelCrawlerJobResponse, GetCrawlerJobStatusData, GetCrawlerJobStatusResponse, GetCrawlerJobStatusError, GetAllAssignments1Data, GetAllAssignments1Response, GetPendingReviewData, GetPendingReviewResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getAssignment = <ThrowOnError extends boolean = false>(options: Options<GetAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssignmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/assignments/{id}',
        ...options
    });
};

export const updateAssignment = <ThrowOnError extends boolean = false>(options: Options<UpdateAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateAssignmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/assignments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reindex all assignments (no-op)
 */
export const reindexAll = <ThrowOnError extends boolean = false>(options?: Options<ReindexAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ReindexAllResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/search-index/reindex',
        ...options
    });
};

export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/logout',
        ...options
    });
};

/**
 * Search assignments by keyword directly (simplified)
 */
export const searchByKeyword = <ThrowOnError extends boolean = false>(options: Options<SearchByKeywordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchByKeywordResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/assignments/search',
        ...options
    });
};

/**
 * Search assignments without authentication
 */
export const searchAssignments = <ThrowOnError extends boolean = false>(options: Options<SearchAssignmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SearchAssignmentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/assignments/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const runCrawlersNow = <ThrowOnError extends boolean = false>(options?: Options<RunCrawlersNowData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RunCrawlersNowResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/crawler/public/run-now',
        ...options
    });
};

/**
 * Start a crawler job for a specific source
 * Triggers a new crawler job for the specified source ID. Requires admin privileges.
 */
export const startCrawlerJob = <ThrowOnError extends boolean = false>(options: Options<StartCrawlerJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartCrawlerJobResponse, StartCrawlerJobError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/crawler/jobs/source/{sourceId}',
        ...options
    });
};

export const startScheduledCrawlerJobs = <ThrowOnError extends boolean = false>(options?: Options<StartScheduledCrawlerJobsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StartScheduledCrawlerJobsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/crawler/jobs/scheduled',
        ...options
    });
};

export const approveAssignment = <ThrowOnError extends boolean = false>(options: Options<ApproveAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/assignments/{id}/approve',
        ...options
    });
};

export const getSessionInfo = <ThrowOnError extends boolean = false>(options?: Options<GetSessionInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSessionInfoResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/session',
        ...options
    });
};

/**
 * Get all assignments or search by keyword
 */
export const getAllAssignments = <ThrowOnError extends boolean = false>(options: Options<GetAllAssignmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllAssignmentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/assignments',
        ...options
    });
};

/**
 * Get assignment by ID without authentication
 */
export const getAssignmentById = <ThrowOnError extends boolean = false>(options: Options<GetAssignmentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssignmentByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/assignments/{assignmentId}',
        ...options
    });
};

export const cancelCrawlerJob = <ThrowOnError extends boolean = false>(options: Options<CancelCrawlerJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CancelCrawlerJobResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/crawler/jobs/{jobId}',
        ...options
    });
};

/**
 * Get status of a crawler job
 * Returns the current status of a specific crawler job by ID.
 */
export const getCrawlerJobStatus = <ThrowOnError extends boolean = false>(options: Options<GetCrawlerJobStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCrawlerJobStatusResponse, GetCrawlerJobStatusError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/crawler/jobs/{jobId}',
        ...options
    });
};

export const getAllAssignments1 = <ThrowOnError extends boolean = false>(options: Options<GetAllAssignments1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllAssignments1Response, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/assignments',
        ...options
    });
};

export const getPendingReview = <ThrowOnError extends boolean = false>(options: Options<GetPendingReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPendingReviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/admin/assignments/pending-review',
        ...options
    });
};