name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: clauderesearch/uppdragsradarn-backend
  FRONTEND_IMAGE_NAME: clauderesearch/uppdragsradarn-frontend
  ADMIN_IMAGE_NAME: clauderesearch/uppdragsradarn-admin

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Build description-parser module
      run: |
        cd description-parser
        ../mvnw clean install -DskipTests -B
        
    - name: Build backend
      run: |
        cd backend
        ./mvnw clean package -DskipTests -B
        
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        export NUXT_PUBLIC_API_BASE="https://jahziah.com/api"
        export NUXT_PUBLIC_COGNITO_REGION="eu-north-1"
        export NUXT_PUBLIC_COGNITO_USER_POOL_ID="eu-north-1_34ZSxWwnh"
        export NUXT_PUBLIC_COGNITO_CLIENT_ID="54a09pb5vcgecj3m8h0bfch8a1"
        export NUXT_PUBLIC_COGNITO_DOMAIN="uppdragsradarn.auth.eu-north-1.amazoncognito.com"
        npm run generate
        
    - name: Build admin
      run: |
        cd admin
        npm ci
        export NUXT_PUBLIC_API_BASE="https://jahziah.com/api"
        export NUXT_PUBLIC_COGNITO_REGION="eu-north-1"
        export NUXT_PUBLIC_COGNITO_USER_POOL_ID="eu-north-1_34ZSxWwnh"
        export NUXT_PUBLIC_COGNITO_CLIENT_ID="54a09pb5vcgecj3m8h0bfch8a1"
        export NUXT_PUBLIC_COGNITO_DOMAIN="uppdragsradarn.auth.eu-north-1.amazoncognito.com"
        npm run generate
        
    - name: Deploy frontend to Spaces
      run: |
        # Install s3cmd
        sudo apt-get update && sudo apt-get install -y s3cmd
        
        # Configure s3cmd for DigitalOcean Spaces
        cat > ~/.s3cfg << EOF
        [default]
        host_base = ams3.digitaloceanspaces.com
        host_bucket = %(bucket)s.ams3.digitaloceanspaces.com
        access_key = ${{ secrets.DIGITALOCEAN_SPACES_KEY }}
        secret_key = ${{ secrets.DIGITALOCEAN_SPACES_SECRET }}
        use_https = True
        EOF
        
        # Create buckets and sync
        s3cmd mb s3://uppdragsradarn-frontend-prod --region=ams3 || true
        s3cmd mb s3://uppdragsradarn-admin-prod --region=ams3 || true
        
        s3cmd sync frontend/.output/public/ s3://uppdragsradarn-frontend-prod/ --delete-removed --acl-public
        s3cmd sync admin/.output/public/ s3://uppdragsradarn-admin-prod/ --delete-removed --acl-public
        
        # Set proper MIME types for common files
        s3cmd modify s3://uppdragsradarn-frontend-prod/index.html --add-header="Content-Type:text/html"
        s3cmd modify s3://uppdragsradarn-admin-prod/index.html --add-header="Content-Type:text/html"
        
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push backend Docker image
      run: |
        cd backend
        docker build -t ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
        
    - name: Save DigitalOcean kubeconfig
      run: |
        doctl kubernetes cluster kubeconfig save ${{ secrets.DIGITALOCEAN_CLUSTER_ID }}
        
    - name: Deploy backend to Kubernetes
      run: |
        # Install Terraform
        wget https://releases.hashicorp.com/terraform/1.12.1/terraform_1.12.1_linux_amd64.zip
        unzip terraform_1.12.1_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        
        # Deploy with Terraform
        cd terraform/environments/prod
        export TF_VAR_do_token="${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}"
        export TF_VAR_domain="uppdragsradarn.se"
        export TF_VAR_aws_cognito_domain="${{ secrets.AWS_COGNITO_DOMAIN }}"
        export TF_VAR_aws_cognito_client_id="${{ secrets.AWS_COGNITO_CLIENT_ID }}"
        export TF_VAR_aws_cognito_client_secret="${{ secrets.AWS_COGNITO_CLIENT_SECRET }}"
        export TF_VAR_openai_api_key="${{ secrets.OPENAI_API_KEY }}"
        export TF_VAR_db_password="${{ secrets.DB_PASSWORD }}"
        export TF_VAR_backend_image="${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}"
        export TF_VAR_frontend_image="unused"
        export TF_VAR_admin_image="unused"
        export AWS_ACCESS_KEY_ID="${{ secrets.DIGITALOCEAN_SPACES_KEY }}"
        export AWS_SECRET_ACCESS_KEY="${{ secrets.DIGITALOCEAN_SPACES_SECRET }}"
        
        terraform plan
        terraform apply -auto-approve
        
    - name: Update CDN endpoints
      run: |
        echo "Deployment complete!"
        echo "Frontend URL: https://uppdragsradarn-frontend-prod.ams3.digitaloceanspaces.com"
        echo "Admin URL: https://uppdragsradarn-admin-prod.ams3.digitaloceanspaces.com"
        echo "Backend deployed to Kubernetes cluster"