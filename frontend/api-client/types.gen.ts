// This file is auto-generated by @hey-api/openapi-ts

export type AssignmentDto = {
    id?: string;
    title: string;
    description?: string;
    companyName?: string;
    location?: string;
    remotePercentage?: number;
    durationMonths?: number;
    startDate?: string;
    hourlyRateMin?: number;
    hourlyRateMax?: number;
    currency?: string;
    hoursPerWeek?: number;
    skills?: Array<string>;
    applicationDeadline?: string;
    applicationUrl?: string;
    source?: SourceDto;
    active?: boolean;
    premiumOnly?: boolean;
    limitedVersion?: boolean;
    needsManualReview?: boolean;
    piiDetected?: string;
};

export type SourceDto = {
    id?: string;
    name: string;
    baseUrl?: string;
    sourceType: 'EMAIL' | 'WEB_SCRAPER' | 'API' | 'EMAGINE' | 'ASOCIETYGROUP' | 'EWORK' | 'EXPERIS';
    configuration?: string;
    active?: boolean;
};

export type ApplicationContextReadable = {
    parent?: unknown;
    id?: string;
    displayName?: string;
    autowireCapableBeanFactory?: AutowireCapableBeanFactory;
    applicationName?: string;
    startupDate?: number;
    environment?: Environment;
    beanDefinitionCount?: number;
    beanDefinitionNames?: Array<string>;
    parentBeanFactory?: BeanFactory;
    classLoader?: {
        name?: string;
        registeredAsParallelCapable?: boolean;
        parent?: {
            name?: string;
            registeredAsParallelCapable?: boolean;
            unnamedModule?: {
                name?: string;
                classLoader?: {
                    name?: string;
                    registeredAsParallelCapable?: boolean;
                    definedPackages?: Array<{
                        name?: string;
                        sealed?: boolean;
                        annotations?: Array<unknown>;
                        declaredAnnotations?: Array<unknown>;
                        specificationTitle?: string;
                        specificationVersion?: string;
                        specificationVendor?: string;
                        implementationTitle?: string;
                        implementationVersion?: string;
                        implementationVendor?: string;
                    }>;
                };
                descriptor?: {
                    open?: boolean;
                    automatic?: boolean;
                };
                named?: boolean;
                annotations?: Array<unknown>;
                declaredAnnotations?: Array<unknown>;
                packages?: Array<string>;
                nativeAccessEnabled?: boolean;
                layer?: unknown;
            };
            definedPackages?: Array<{
                name?: string;
                sealed?: boolean;
                annotations?: Array<unknown>;
                declaredAnnotations?: Array<unknown>;
                specificationTitle?: string;
                specificationVersion?: string;
                specificationVendor?: string;
                implementationTitle?: string;
                implementationVersion?: string;
                implementationVendor?: string;
            }>;
        };
        unnamedModule?: {
            name?: string;
            classLoader?: {
                name?: string;
                registeredAsParallelCapable?: boolean;
                definedPackages?: Array<{
                    name?: string;
                    sealed?: boolean;
                    annotations?: Array<unknown>;
                    declaredAnnotations?: Array<unknown>;
                    specificationTitle?: string;
                    specificationVersion?: string;
                    specificationVendor?: string;
                    implementationTitle?: string;
                    implementationVersion?: string;
                    implementationVendor?: string;
                }>;
            };
            descriptor?: {
                open?: boolean;
                automatic?: boolean;
            };
            named?: boolean;
            annotations?: Array<unknown>;
            declaredAnnotations?: Array<unknown>;
            packages?: Array<string>;
            nativeAccessEnabled?: boolean;
            layer?: unknown;
        };
        definedPackages?: Array<{
            name?: string;
            sealed?: boolean;
            annotations?: Array<unknown>;
            declaredAnnotations?: Array<unknown>;
            specificationTitle?: string;
            specificationVersion?: string;
            specificationVendor?: string;
            implementationTitle?: string;
            implementationVersion?: string;
            implementationVendor?: string;
        }>;
    };
};

export type ApplicationContextWritable = {
    parent?: unknown;
    id?: string;
    displayName?: string;
    autowireCapableBeanFactory?: AutowireCapableBeanFactory;
    applicationName?: string;
    startupDate?: number;
    environment?: Environment;
    beanDefinitionCount?: number;
    beanDefinitionNames?: Array<string>;
    parentBeanFactory?: BeanFactory;
    classLoader?: {
        name?: string;
        registeredAsParallelCapable?: boolean;
        parent?: {
            name?: string;
            registeredAsParallelCapable?: boolean;
            unnamedModule?: {
                name?: string;
                classLoader?: {
                    name?: string;
                    registeredAsParallelCapable?: boolean;
                    definedPackages?: Array<{
                        name?: string;
                        sealed?: boolean;
                        annotations?: Array<unknown>;
                        declaredAnnotations?: Array<unknown>;
                        specificationTitle?: string;
                        specificationVersion?: string;
                        specificationVendor?: string;
                        implementationTitle?: string;
                        implementationVersion?: string;
                        implementationVendor?: string;
                    }>;
                    defaultAssertionStatus?: boolean;
                };
                descriptor?: {
                    open?: boolean;
                    automatic?: boolean;
                };
                named?: boolean;
                annotations?: Array<unknown>;
                declaredAnnotations?: Array<unknown>;
                packages?: Array<string>;
                nativeAccessEnabled?: boolean;
                layer?: unknown;
            };
            definedPackages?: Array<{
                name?: string;
                sealed?: boolean;
                annotations?: Array<unknown>;
                declaredAnnotations?: Array<unknown>;
                specificationTitle?: string;
                specificationVersion?: string;
                specificationVendor?: string;
                implementationTitle?: string;
                implementationVersion?: string;
                implementationVendor?: string;
            }>;
            defaultAssertionStatus?: boolean;
        };
        unnamedModule?: {
            name?: string;
            classLoader?: {
                name?: string;
                registeredAsParallelCapable?: boolean;
                definedPackages?: Array<{
                    name?: string;
                    sealed?: boolean;
                    annotations?: Array<unknown>;
                    declaredAnnotations?: Array<unknown>;
                    specificationTitle?: string;
                    specificationVersion?: string;
                    specificationVendor?: string;
                    implementationTitle?: string;
                    implementationVersion?: string;
                    implementationVendor?: string;
                }>;
                defaultAssertionStatus?: boolean;
            };
            descriptor?: {
                open?: boolean;
                automatic?: boolean;
            };
            named?: boolean;
            annotations?: Array<unknown>;
            declaredAnnotations?: Array<unknown>;
            packages?: Array<string>;
            nativeAccessEnabled?: boolean;
            layer?: unknown;
        };
        definedPackages?: Array<{
            name?: string;
            sealed?: boolean;
            annotations?: Array<unknown>;
            declaredAnnotations?: Array<unknown>;
            specificationTitle?: string;
            specificationVersion?: string;
            specificationVendor?: string;
            implementationTitle?: string;
            implementationVersion?: string;
            implementationVendor?: string;
        }>;
        defaultAssertionStatus?: boolean;
    };
};

export type AutowireCapableBeanFactory = unknown;

export type BeanFactory = unknown;

export type DefaultHttpStatusCode = HttpStatusCode;

export type Environment = {
    activeProfiles?: Array<string>;
    defaultProfiles?: Array<string>;
};

export type FilterRegistration = {
    servletNameMappings?: Array<string>;
    urlPatternMappings?: Array<string>;
    initParameters?: {
        [key: string]: string;
    };
    name?: string;
    className?: string;
};

export type HttpStatus = '100 CONTINUE' | '101 SWITCHING_PROTOCOLS' | '102 PROCESSING' | '103 EARLY_HINTS' | '103 CHECKPOINT' | '200 OK' | '201 CREATED' | '202 ACCEPTED' | '203 NON_AUTHORITATIVE_INFORMATION' | '204 NO_CONTENT' | '205 RESET_CONTENT' | '206 PARTIAL_CONTENT' | '207 MULTI_STATUS' | '208 ALREADY_REPORTED' | '226 IM_USED' | '300 MULTIPLE_CHOICES' | '301 MOVED_PERMANENTLY' | '302 FOUND' | '302 MOVED_TEMPORARILY' | '303 SEE_OTHER' | '304 NOT_MODIFIED' | '305 USE_PROXY' | '307 TEMPORARY_REDIRECT' | '308 PERMANENT_REDIRECT' | '400 BAD_REQUEST' | '401 UNAUTHORIZED' | '402 PAYMENT_REQUIRED' | '403 FORBIDDEN' | '404 NOT_FOUND' | '405 METHOD_NOT_ALLOWED' | '406 NOT_ACCEPTABLE' | '407 PROXY_AUTHENTICATION_REQUIRED' | '408 REQUEST_TIMEOUT' | '409 CONFLICT' | '410 GONE' | '411 LENGTH_REQUIRED' | '412 PRECONDITION_FAILED' | '413 PAYLOAD_TOO_LARGE' | '413 REQUEST_ENTITY_TOO_LARGE' | '414 URI_TOO_LONG' | '414 REQUEST_URI_TOO_LONG' | '415 UNSUPPORTED_MEDIA_TYPE' | '416 REQUESTED_RANGE_NOT_SATISFIABLE' | '417 EXPECTATION_FAILED' | '418 I_AM_A_TEAPOT' | '419 INSUFFICIENT_SPACE_ON_RESOURCE' | '420 METHOD_FAILURE' | '421 DESTINATION_LOCKED' | '422 UNPROCESSABLE_ENTITY' | '423 LOCKED' | '424 FAILED_DEPENDENCY' | '425 TOO_EARLY' | '426 UPGRADE_REQUIRED' | '428 PRECONDITION_REQUIRED' | '429 TOO_MANY_REQUESTS' | '431 REQUEST_HEADER_FIELDS_TOO_LARGE' | '451 UNAVAILABLE_FOR_LEGAL_REASONS' | '500 INTERNAL_SERVER_ERROR' | '501 NOT_IMPLEMENTED' | '502 BAD_GATEWAY' | '503 SERVICE_UNAVAILABLE' | '504 GATEWAY_TIMEOUT' | '505 HTTP_VERSION_NOT_SUPPORTED' | '506 VARIANT_ALSO_NEGOTIATES' | '507 INSUFFICIENT_STORAGE' | '508 LOOP_DETECTED' | '509 BANDWIDTH_LIMIT_EXCEEDED' | '510 NOT_EXTENDED' | '511 NETWORK_AUTHENTICATION_REQUIRED';

export type HttpStatusCode = {
    is4xxClientError?: boolean;
    is5xxServerError?: boolean;
    is1xxInformational?: boolean;
    is2xxSuccessful?: boolean;
    is3xxRedirection?: boolean;
    error?: boolean;
};

export type JspConfigDescriptor = {
    taglibs?: Array<TaglibDescriptor>;
    jspPropertyGroups?: Array<JspPropertyGroupDescriptor>;
};

export type JspPropertyGroupDescriptor = {
    deferredSyntaxAllowedAsLiteral?: string;
    elIgnored?: string;
    errorOnELNotFound?: string;
    pageEncoding?: string;
    scriptingInvalid?: string;
    isXml?: string;
    includePreludes?: Array<string>;
    includeCodas?: Array<string>;
    trimDirectiveWhitespaces?: string;
    errorOnUndeclaredNamespace?: string;
    urlPatterns?: Array<string>;
    defaultContentType?: string;
    buffer?: string;
};

export type RedirectViewReadable = {
    applicationContext?: ApplicationContextReadable;
    servletContext?: ServletContextReadable;
    contentType?: string;
    requestContextAttribute?: string;
    staticAttributes?: {
        [key: string]: unknown;
    };
    exposePathVariables?: boolean;
    beanName?: string;
    url?: string;
    statusCode?: DefaultHttpStatusCode | HttpStatus;
    hosts?: Array<string>;
    redirectView?: boolean;
    propagateQueryProperties?: boolean;
    attributesMap?: {
        [key: string]: unknown;
    };
};

export type RedirectViewWritable = {
    applicationContext?: ApplicationContextWritable;
    servletContext?: ServletContextWritable;
    contentType?: string;
    requestContextAttribute?: string;
    staticAttributes?: {
        [key: string]: unknown;
    };
    exposePathVariables?: boolean;
    exposeContextBeansAsAttributes?: boolean;
    exposedContextBeanNames?: Array<string>;
    beanName?: string;
    url?: string;
    contextRelative?: boolean;
    http10Compatible?: boolean;
    exposeModelAttributes?: boolean;
    encodingScheme?: string;
    statusCode?: DefaultHttpStatusCode | HttpStatus;
    expandUriTemplateVariables?: boolean;
    propagateQueryParams?: boolean;
    hosts?: Array<string>;
    redirectView?: boolean;
    propagateQueryProperties?: boolean;
    attributesMap?: {
        [key: string]: unknown;
    };
    attributesCSV?: string;
    attributes?: {
        [key: string]: string;
    };
};

export type ServletContextReadable = {
    effectiveMajorVersion?: number;
    effectiveMinorVersion?: number;
    serverInfo?: string;
    servletContextName?: string;
    servletRegistrations?: {
        [key: string]: ServletRegistration;
    };
    filterRegistrations?: {
        [key: string]: FilterRegistration;
    };
    sessionCookieConfig?: SessionCookieConfig;
    defaultSessionTrackingModes?: Array<'COOKIE' | 'URL' | 'SSL'>;
    effectiveSessionTrackingModes?: Array<'COOKIE' | 'URL' | 'SSL'>;
    jspConfigDescriptor?: JspConfigDescriptor;
    virtualServerName?: string;
    sessionTimeout?: number;
    requestCharacterEncoding?: string;
    responseCharacterEncoding?: string;
    classLoader?: {
        name?: string;
        registeredAsParallelCapable?: boolean;
        definedPackages?: Array<{
            name?: string;
            sealed?: boolean;
            annotations?: Array<unknown>;
            declaredAnnotations?: Array<unknown>;
            specificationTitle?: string;
            specificationVersion?: string;
            specificationVendor?: string;
            implementationTitle?: string;
            implementationVersion?: string;
            implementationVendor?: string;
        }>;
    };
    majorVersion?: number;
    minorVersion?: number;
    attributeNames?: unknown;
    contextPath?: string;
    initParameterNames?: unknown;
};

export type ServletContextWritable = {
    effectiveMajorVersion?: number;
    effectiveMinorVersion?: number;
    serverInfo?: string;
    servletContextName?: string;
    servletRegistrations?: {
        [key: string]: ServletRegistration;
    };
    filterRegistrations?: {
        [key: string]: FilterRegistration;
    };
    sessionCookieConfig?: SessionCookieConfig;
    sessionTrackingModes?: Array<'COOKIE' | 'URL' | 'SSL'>;
    defaultSessionTrackingModes?: Array<'COOKIE' | 'URL' | 'SSL'>;
    effectiveSessionTrackingModes?: Array<'COOKIE' | 'URL' | 'SSL'>;
    jspConfigDescriptor?: JspConfigDescriptor;
    virtualServerName?: string;
    sessionTimeout?: number;
    requestCharacterEncoding?: string;
    responseCharacterEncoding?: string;
    classLoader?: {
        name?: string;
        registeredAsParallelCapable?: boolean;
        definedPackages?: Array<{
            name?: string;
            sealed?: boolean;
            annotations?: Array<unknown>;
            declaredAnnotations?: Array<unknown>;
            specificationTitle?: string;
            specificationVersion?: string;
            specificationVendor?: string;
            implementationTitle?: string;
            implementationVersion?: string;
            implementationVendor?: string;
        }>;
        defaultAssertionStatus?: boolean;
    };
    majorVersion?: number;
    minorVersion?: number;
    attributeNames?: unknown;
    contextPath?: string;
    initParameterNames?: unknown;
};

export type ServletRegistration = {
    mappings?: Array<string>;
    runAsRole?: string;
    initParameters?: {
        [key: string]: string;
    };
    name?: string;
    className?: string;
};

export type SessionCookieConfig = {
    maxAge?: number;
    httpOnly?: boolean;
    secure?: boolean;
    domain?: string;
    name?: string;
    path?: string;
    attributes?: {
        [key: string]: string;
    };
    /**
     * @deprecated
     */
    comment?: string;
};

export type TaglibDescriptor = {
    taglibURI?: string;
    taglibLocation?: string;
};

export type SearchCriteriaDto = {
    keyword?: string;
    location?: string;
    minRemotePercentage?: number;
    minDurationMonths?: number;
    earliestStartDate?: string;
    minHourlyRate?: number;
    skills?: Array<string>;
    minHoursPerWeek?: number;
    companyNames?: Array<string>;
    sourceIds?: Array<string>;
};

export type Pageable = {
    page?: number;
    size?: number;
    sort?: Array<string>;
};

export type PageAssignmentDto = {
    totalPages?: number;
    totalElements?: number;
    pageable?: PageableObject;
    size?: number;
    content?: Array<AssignmentDto>;
    number?: number;
    sort?: SortObject;
    numberOfElements?: number;
    first?: boolean;
    last?: boolean;
    empty?: boolean;
};

export type PageableObject = {
    paged?: boolean;
    pageNumber?: number;
    pageSize?: number;
    unpaged?: boolean;
    offset?: number;
    sort?: SortObject;
};

export type SortObject = {
    sorted?: boolean;
    unsorted?: boolean;
    empty?: boolean;
};

export type CrawlerJobExecution = {
    id?: string;
    sourceId?: string;
    sourceName?: string;
    startTime?: string;
    endTime?: string;
    result?: 'SUCCESS' | 'FAILED' | 'TIMEOUT' | 'RUNNING' | 'SCHEDULED' | 'CANCELLED';
    assignmentsFound?: number;
    assignmentsCreated?: number;
    assignmentsUpdated?: number;
    errorMessage?: string;
    processedAssignmentIds?: Array<string>;
};

export type GetAssignmentData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/admin/assignments/{id}';
};

export type GetAssignmentResponses = {
    /**
     * OK
     */
    200: AssignmentDto;
};

export type GetAssignmentResponse = GetAssignmentResponses[keyof GetAssignmentResponses];

export type UpdateAssignmentData = {
    body: AssignmentDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/admin/assignments/{id}';
};

export type UpdateAssignmentResponses = {
    /**
     * OK
     */
    200: AssignmentDto;
};

export type UpdateAssignmentResponse = UpdateAssignmentResponses[keyof UpdateAssignmentResponses];

export type ReindexAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/search-index/reindex';
};

export type ReindexAllResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type ReindexAllResponse = ReindexAllResponses[keyof ReindexAllResponses];

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/logout';
};

export type LogoutResponses = {
    /**
     * OK
     */
    200: RedirectViewReadable;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type SearchByKeywordData = {
    body?: never;
    path?: never;
    query: {
        keyword?: string;
        pageable: Pageable;
    };
    url: '/api/assignments/search';
};

export type SearchByKeywordResponses = {
    /**
     * OK
     */
    200: PageAssignmentDto;
};

export type SearchByKeywordResponse = SearchByKeywordResponses[keyof SearchByKeywordResponses];

export type SearchAssignmentsData = {
    body: SearchCriteriaDto;
    path?: never;
    query: {
        pageable: Pageable;
    };
    url: '/api/assignments/search';
};

export type SearchAssignmentsResponses = {
    /**
     * OK
     */
    200: PageAssignmentDto;
};

export type SearchAssignmentsResponse = SearchAssignmentsResponses[keyof SearchAssignmentsResponses];

export type RunCrawlersNowData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/crawler/public/run-now';
};

export type RunCrawlersNowResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type RunCrawlersNowResponse = RunCrawlersNowResponses[keyof RunCrawlersNowResponses];

export type StartCrawlerJobData = {
    body?: never;
    path: {
        /**
         * Source ID to crawl
         */
        sourceId: string;
    };
    query?: never;
    url: '/api/admin/crawler/jobs/source/{sourceId}';
};

export type StartCrawlerJobErrors = {
    /**
     * Unauthorized - invalid credentials
     */
    401: {
        [key: string]: unknown;
    };
    /**
     * Forbidden - missing required role
     */
    403: {
        [key: string]: unknown;
    };
    /**
     * Internal server error starting job
     */
    500: {
        [key: string]: unknown;
    };
};

export type StartCrawlerJobError = StartCrawlerJobErrors[keyof StartCrawlerJobErrors];

export type StartCrawlerJobResponses = {
    /**
     * Crawler job started successfully
     */
    200: {
        [key: string]: unknown;
    };
};

export type StartCrawlerJobResponse = StartCrawlerJobResponses[keyof StartCrawlerJobResponses];

export type StartScheduledCrawlerJobsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/crawler/jobs/scheduled';
};

export type StartScheduledCrawlerJobsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type StartScheduledCrawlerJobsResponse = StartScheduledCrawlerJobsResponses[keyof StartScheduledCrawlerJobsResponses];

export type ApproveAssignmentData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/admin/assignments/{id}/approve';
};

export type ApproveAssignmentResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetSessionInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/session';
};

export type GetSessionInfoResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetSessionInfoResponse = GetSessionInfoResponses[keyof GetSessionInfoResponses];

export type GetAllAssignmentsData = {
    body?: never;
    path?: never;
    query: {
        keyword?: string;
        pageable: Pageable;
    };
    url: '/api/assignments';
};

export type GetAllAssignmentsResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetAllAssignmentsResponse = GetAllAssignmentsResponses[keyof GetAllAssignmentsResponses];

export type GetAssignmentByIdData = {
    body?: never;
    path: {
        assignmentId: string;
    };
    query?: never;
    url: '/api/assignments/{assignmentId}';
};

export type GetAssignmentByIdResponses = {
    /**
     * OK
     */
    200: AssignmentDto;
};

export type GetAssignmentByIdResponse = GetAssignmentByIdResponses[keyof GetAssignmentByIdResponses];

export type CancelCrawlerJobData = {
    body?: never;
    path: {
        jobId: string;
    };
    query?: never;
    url: '/api/admin/crawler/jobs/{jobId}';
};

export type CancelCrawlerJobResponses = {
    /**
     * OK
     */
    200: {
        [key: string]: unknown;
    };
};

export type CancelCrawlerJobResponse = CancelCrawlerJobResponses[keyof CancelCrawlerJobResponses];

export type GetCrawlerJobStatusData = {
    body?: never;
    path: {
        /**
         * Job ID to get status for
         */
        jobId: string;
    };
    query?: never;
    url: '/api/admin/crawler/jobs/{jobId}';
};

export type GetCrawlerJobStatusErrors = {
    /**
     * Job not found
     */
    404: CrawlerJobExecution;
};

export type GetCrawlerJobStatusError = GetCrawlerJobStatusErrors[keyof GetCrawlerJobStatusErrors];

export type GetCrawlerJobStatusResponses = {
    /**
     * Successfully retrieved job status
     */
    200: CrawlerJobExecution;
};

export type GetCrawlerJobStatusResponse = GetCrawlerJobStatusResponses[keyof GetCrawlerJobStatusResponses];

export type GetAllAssignments1Data = {
    body?: never;
    path?: never;
    query: {
        pageable: Pageable;
    };
    url: '/api/admin/assignments';
};

export type GetAllAssignments1Responses = {
    /**
     * OK
     */
    200: PageAssignmentDto;
};

export type GetAllAssignments1Response = GetAllAssignments1Responses[keyof GetAllAssignments1Responses];

export type GetPendingReviewData = {
    body?: never;
    path?: never;
    query: {
        pageable: Pageable;
    };
    url: '/api/admin/assignments/pending-review';
};

export type GetPendingReviewResponses = {
    /**
     * OK
     */
    200: PageAssignmentDto;
};

export type GetPendingReviewResponse = GetPendingReviewResponses[keyof GetPendingReviewResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | 'https://dev.uppdragsradarn.se' | (string & {});
};